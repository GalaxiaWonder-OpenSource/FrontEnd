import { PersonId } from '../../shared/model/person-id.vo';
import { EmailAddress } from '../../shared/model/email-adress.vo';
import { PhoneNumber } from './phone-number.vo';
import { ProfessionalId } from './professional-id.vo';

/**
 * Entity representing a person in the system.
 * Encapsulates identity, contact information, and optional professional details.
 */
export class Person {
  /** Unique identifier of the person. */
  public readonly id: PersonId;

  /** Person's primary email address. */
  public readonly email: EmailAddress;

  /** Person's phone number. */
  public readonly phone: PhoneNumber;

  /** Optional professional ID (e.g., CIP or CAP number). */
  public readonly professionalId?: ProfessionalId;

  /** Optional profession or job title. */
  public readonly profession?: string;

  /** Person's first name. */
  public firstName: string;

  /** Person's last name. */
  public lastName: string;

  /**
   * Creates a new instance of Person.
   *
   * @param id - Optional unique identifier (generated by default).
   * @param email - Email address (value object).
   * @param phone - Phone number (value object).
   * @param firstName - First name of the person.
   * @param lastName - Last name of the person.
   * @param professionalId - Optional professional identifier.
   * @param profession - Optional profession or job title.
   *
   * @throws Error if first or last name is empty.
   */
  constructor({
                id = new PersonId(),
                email,
                phone,
                firstName,
                lastName,
                professionalId,
                profession
              }: {
    id?: PersonId;
    email: EmailAddress;
    phone: PhoneNumber;
    firstName: string;
    lastName: string;
    professionalId?: ProfessionalId;
    profession?: string;
  }) {
    if (!firstName.trim()) throw new Error('First name cannot be empty');
    if (!lastName.trim()) throw new Error('Last name cannot be empty');

    this.id = id;
    this.email = email;
    this.phone = phone;
    this.firstName = firstName.trim();
    this.lastName = lastName.trim();
    this.professionalId = professionalId;
    this.profession = profession?.trim();
  }

  /**
   * Returns the person's full name as a string.
   *
   * @returns Full name in the format "FirstName LastName".
   */
  get fullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }

  /**
   * Serializes the person into a plain JSON-compatible object.
   *
   * @returns A JSON representation of the person.
   */
  toJSON() {
    return {
      id: this.id.value,
      email: this.email.value,
      phone: this.phone.value,
      firstName: this.firstName,
      lastName: this.lastName,
      fullName: this.fullName,
      professionalId: this.professionalId?.value ?? null,
      profession: this.profession ?? null
    };
  }
}
