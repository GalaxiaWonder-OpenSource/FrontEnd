import { EmailAddress } from '../../shared/model/email-adress.vo';

/**
 * Entity representing a user registration request.
 * Stores registration intent, credentials, and time-bound metadata.
 */
export class RegistrationRequest {
  /** Unique identifier of the registration request. */
  public readonly id: number | undefined;

  /** Email address provided by the user. */
  public readonly email: EmailAddress;

  /** Raw or hashed password provided during registration. */
  public readonly password: string;

  /** Full name of the registering user. */
  public readonly fullName: string;

  /** Date and time when the registration request was created. */
  public readonly requestedAt: Date;

  /** Date and time when the registration request will expire. */
  public readonly expiresAt: Date;

  /**
   * Constructs a new RegistrationRequest instance.
   *
   * @param id - Optional unique identifier (generated by default).
   * @param email - Email address (value object).
   * @param password - User's password (must be at least 6 characters).
   * @param fullName - User's full name (non-empty).
   * @param requestedAt - Date of request (default: now).
   * @param expiresAt - Date when the request expires (must be after requestedAt).
   *
   * @throws Error if validation fails.
   */
  constructor({
                id,
                email,
                password,
                fullName,
                requestedAt = new Date(),
                expiresAt
              }: {
    id?: number;
    email: EmailAddress;
    password: string;
    fullName: string;
    requestedAt?: Date;
    expiresAt: Date;
  }) {
    if (!password || password.length < 6) {
      throw new Error('Password must be at least 6 characters long.');
    }

    if (!fullName.trim()) {
      throw new Error('Full name cannot be empty.');
    }

    if (expiresAt <= requestedAt) {
      throw new Error('Expiration date must be after request date.');
    }

    this.id = id;
    this.email = email;
    this.password = password;
    this.fullName = fullName.trim();
    this.requestedAt = requestedAt;
    this.expiresAt = expiresAt;
  }

  /**
   * Serializes the registration request into a plain JSON object.
   *
   * @returns A JSON-compatible representation of the request.
   */
  toJSON() {
    return {
      id: this.id,
      email: this.email.value,
      password: this.password,
      fullName: this.fullName,
      requestedAt: this.requestedAt.toISOString(),
      expiresAt: this.expiresAt.toISOString()
    };
  }
}
