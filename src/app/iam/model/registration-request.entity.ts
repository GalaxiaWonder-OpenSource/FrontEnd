import { RegistrationRequestStatus } from './registration-request-status.vo';

/**
 * Entity representing a pending user registration request.
 * Stores the user's intent to register, along with verification metadata.
 */
export class RegistrationRequest {
  /** Unique identifier of the registration request. */
  public readonly id: number | undefined;

  /** Email address provided for registration. */
  public readonly email: string;

  /** Raw or hashed password submitted during registration. */
  public readonly password: string;

  /** Full name of the user requesting registration. */
  public readonly fullName: string;

  /** Timestamp indicating when the request was submitted. */
  public readonly requestedAt: Date;

  /** Timestamp indicating when the request will expire. */
  public readonly expiresAt: Date;

  /** Current status of the registration request. */
  public status: RegistrationRequestStatus;

  /**
   * Constructs a new RegistrationRequest instance.
   *
   * @param id - Optional unique ID (generated by default).
   * @param email - Email address (value object).
   * @param password - Raw or hashed password.
   * @param fullName - User's full name.
   * @param requestedAt - Timestamp when the request was made (default: now).
   * @param expiresAt - Expiration timestamp.
   * @param status - Optional status (default: CONFIRMATION_PENDING).
   *
   * @throws Error if validations fail (empty name, short password, invalid expiration).
   */
  constructor({
                id,
                email,
                password,
                fullName,
                requestedAt = new Date(),
                expiresAt,
                status = RegistrationRequestStatus.CONFIRMATION_PENDING
              }: {
    id?: number;
    email: string;
    password: string;
    fullName: string;
    requestedAt?: Date;
    expiresAt: Date;
    status?: RegistrationRequestStatus;
  }) {
    if (!fullName.trim()) {
      throw new Error('Full name cannot be empty.');
    }

    if (!password || password.length < 6) {
      throw new Error('Password must be at least 6 characters long.');
    }

    if (expiresAt <= requestedAt) {
      throw new Error('Expiration date must be after request date.');
    }

    this.id = id;
    this.email = email;
    this.password = password;
    this.fullName = fullName.trim();
    this.requestedAt = requestedAt;
    this.expiresAt = expiresAt;
    this.status = status;
  }

  /**
   * Marks this registration request as completed (user account created).
   */
  markAsRegistered() {
    this.status = RegistrationRequestStatus.REGISTERED;
  }

  /**
   * Serializes the registration request into a JSON-compatible object.
   *
   * @returns A plain object representation of the request.
   */
  toJSON() {
    return {
      id: this.id,
      email: this.email,
      password: this.password,
      fullName: this.fullName,
      requestedAt: this.requestedAt.toISOString(),
      expiresAt: this.expiresAt.toISOString(),
      status: this.status
    };
  }
}
