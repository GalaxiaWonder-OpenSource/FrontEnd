/**
 * Value Object for Task ID
 * Represents a unique identifier for a task
 * IDs are generated by the backend
 */
export class TaskId {
  private readonly _value: number;

  constructor(value?: number | string) {
    if (value !== undefined && value !== null) {
      if (typeof value === 'string') {
        // Intentar convertir string a n√∫mero
        const numValue = parseInt(value, 10);
        if (isNaN(numValue)) {
          throw new Error('Task ID must be a valid number');
        }
        this._value = numValue;
      } else {
        if (isNaN(value)) {
          throw new Error('Task ID must be a valid number');
        }
        this._value = value;
      }
    } else {
      // En lugar de generar un ID, usamos -1 para indicar que es temporal
      // y debe ser reemplazado por un ID del backend
      this._value = -1;
    }
  }

  get value(): number {
    return this._value;
  }

  toString(): string {
    return this._value.toString();
  }

  toJSON(): number {
    return this._value;
  }

  equals(other: TaskId): boolean {
    return this._value === other?._value;
  }
}
